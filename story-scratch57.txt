#2 Initial Setup Requirements
which composer // дает путь к файлу

#3 Basic Routing
https://laravel.com/docs/5.7/artisan
php artisan  
php artisan server

Routing 
https://laravel.com/docs/5.7/routing

#4 Blade Layout Files
https://laravel.com/docs/5.7/blade

#5 Sending Data to Your Views
https://laravel.com/docs/5.7/views#passing-data-to-views
{{ $foo }} // вырезает опасные символы
{!! $foo !!} // оставляет опасные символы

#6 Controllers 101
https://laravel.com/docs/5.7/controllers 
php artisan make:controller PagesController
Зачем?
- чище файл 'путей'

#7 Databases and Migrations
https://laravel.com/docs/5.7/database
https://laravel.com/docs/5.7/migrations
https://laravel-news.com/laravel-5-4-key-too-long-error
php artisan migrate
php artisan migrate:rollback // откатывает ПОСЛЕДНЮЮ миграцию
php artisan migrate:fresh // удаляет таблицы и создает заново
php artisan make:migration NameMigration

php artisan make:migration create_projects_table

#8 Eloquent, Namespacing, and MVC
Eloquent - active record implementation
У нас есть миграция (таблица) projects, создадим модель project.
php artisan make:model project
https://laravel.com/docs/5.7/eloquent // описание моделей в разделе Eloquent

php artisan tinker // Playground PHP
App\Project::all();
$project = new App\Project;
$project.title = 'Go to store';
$project.description = 'Buy something...';
$project.save();
App\Project::first()->title;

Работа с коллекциями. Они как массив.

App\Project::all()->map->title; // выведет все title из таблицы

Итак, мы изучили MVC

php artisan make:controller ProjectsController

Google JSON Formatter

#10 Directory Structure Review
/routes/console.php - tinker
/database/factories
factory(App\User::class)->make(); // в консоли Tinker
factory(App\User::class)->create(); // в базе данных

ServiceProvider - важная тема!!! необходимо понять!!!

#11 Form Handling and CSRF Protection
https://laravel.com/docs/5.7/csrf

Requests
https://laravel.com/docs/5.7/requests

Helpers,
return redirect('URI');
https://laravel.com/docs/5.7/helpers
App/Http/Cernel.php - в web/middleware подключается csrf проверка, если закоментить, то не будет работать

#12 Routing Conventions Worth Following
https://laravel.com/docs/5.7/controllers#resource-controllers

Проекты. Рассмотрим варианты путей.
/*
    GET /projects (index) - отображение проектов
    GET /projects/create (create) - форма добавления проекта
    GET /projects/1 (show) - страница проекта
    GET /projects/1 (edit) - страница редактирования проекта
    POST /projects (store) - добавление
    PATCH /projects (update) - изменение
    DELETE /projects/1 (destroy) - удаление

    7 действий = 7 route methods

    // список путей
    php artisan route:list

    // АЛЬТЕРНАТИВА
    Route::resource('projects', 'ProjectsController');

    // Контроллер генерируем 
    // Контроллер генерируем 
    php artisan make:controller ProjectsController -r

    // Контроллер генерируем с моделью, и в контроллере есть связывание с моделью в методах, ВСЕ ГОТОВО!
    php artisan make:controller ProjectsController -r -m Project
*/

#13 Faking PATCH and DELETE Requests
https://laravel.com/docs/5.7/routing#form-method-spoofing

Работаем с Resource Controller

!! Нет сниппетов и очень не удобно

dd('im debugger!') // very quick debugging

#14 Form Delete Requests

Длинная запись
{{ method_field('DELETE') }}
{{ csrf_field() }}

Короткая запись, используя BLADE
@method('DELETE')
@csrf

Project::find($id) // 5000 - ошибка Ларавела
Project::findOrFail($id) // Красивая 404 ошибка

#15 Cleaner Controllers and Mass Assignment Concerns
* route model binding
* mass assignment

https://laravel.com/docs/5.7/routing#route-model-binding
    public function show($id) 
    {
        $project = Project::findOrFail($id);
        return $project;
    }
    
    public function show(Project $project) 
    {
        return $project;
    }

Much cleaner?!

Улучшаем store()

Project::create([...]);
+
protected $fillable = [...];

или  protected $guarded = []; // храним поля, кт необходимо защитить от обновлений
+
!! показал, как в браузере добавил поле и request()->all() приняло его, ОГО!

3 (три) варианта сохранения результатов
request('title'); // возвращает строку
request(['title']); // возвращает ассоциативный массив и значение

#16 Two Layers of Validation
"guilty until proven innocent."
https://laravel.com/docs/5.7/validation


First level - Client-side (frontend) validation <input required>
Second level - Server-side (backend) validation

helper function old('title') - хранит введенные значения формы

ПОЛЕЗНОЕ В ВАЛИДАЦИИ:
https://laravel.com/docs/5.7/validation#available-validation-rules

#17 Your First Eloquent Relationships
Project HAS Tasks
Task BELONG Project

php artisan help make:model
php artisan make:model Task -m -f // добавит - Модель, Фабрику, Миграцию
php artisan migrate
php artisan tinker
App\Project()::first();
App\Project::first()->tasks;
App\Task()::first();
App\Task::first()->project;


#18 Form Action Considerations
php artisan make:controller ProjectTasksController

- выделяем элемент в дереве ДОМ
- в консоли $0.submit()

# 18 Create New Project Tasks
{{-- Comments in blade --}}

Куда направлять запрос на добавление Задач, два варианта:
- POST /tasks
- POST /projects/{project}/tasks
Второй предпочтительнее, тк в контроллер будет приходить информация о проекте, а в первом случае проект надо будет прятать в скрытое поле.

Два варианта, как добавить данные:
- Task::create()
- $project->addTask() * 2 варианта исполнения

Валидация!
- делаем через переменную $attributes

Вывод ошибок валидации, стандартный блок, что с ним делаем? Выносим:
@include('errors')

# 19 Better Encapsulation
So with that in mind, let's review our controller and review in which areas we might improve encapsulation and flexibility.

В контроллере ProjectTask мы обновляем модель Task напрямую. Инкапсуляция предлагает перенести это в модель.
$task->complete(); - метод и никому нет дела, как это делается. это контроллер. здесь должно быть минимум мусора

Encapsulation: Hide internal state and values inside a class!

И, перенеся все в модели, мы можем видеть, что он может делать.


# 20 When in Doubt
Еще один контроллер. Гибче, но сложнее.


# 21 Core Concepts: Service Container and Auto-Resolution
Пример Service Container, в контроллере ProjectsController
public function show(Project $project)

НАДО СМОТРЕТЬ НЕСКОЛЬКО РАЗ!!!

# 22 Core Concepts: Service Providers


# 23 
# 24 A Full Registration System in Seconds
https://laravel.com/docs/5.7/authentication
php artisan auth:make
php artisan route:list

# 25 Core Concepts: Middleware
Think of middleware like layers of an onion. As a request enters your application, it travels through these layers, one by one. 
https://laravel.com/docs/5.7/middleware

php artisan make:middleware LogQueries

2 типа:
- глобальный - запускается всегда;
- 'роут' - применяется,когда необходимо (в конструкторе контроллера или в роутах);



# 26 You May Only View Your Projects

auth() helper function
- auth()->id(); // 4
- auth()->user(); // User
- auth()->checked(); // boolean
- auth()->guest(); // boolean

integer
unsignedInteger = Positive Integer

# 27 
# 28 
# 29 
